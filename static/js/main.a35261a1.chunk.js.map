{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GiftGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GiftExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","console","log","trim","length","cats","alert","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GiftGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GiftExpertApp","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"qMAKaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KA+B9C,OAEQ,sBAAMC,SAvBO,SAAEC,GACfA,EAAEC,iBACFC,QAAQC,IAAI,UAITN,EAAWO,OAAOC,OAAS,GAK1BV,GAAc,SAAAW,GAAI,OAAMT,GAAN,mBAAqBS,OAGvCR,EAAc,KAEdS,MAAM,UAOV,SAEI,uBACAC,KAAK,OACLC,MAAUZ,EACVa,SAjCc,SAAEV,GAExBF,EAAcE,EAAEW,OAAOF,a,+BCTlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAGbC,EAHa,iDAGoCC,UAAWH,GAH/C,+DAIAI,MAAOF,GAJP,cAIbG,EAJa,gBAKIA,EAAKC,OALT,uBAKXC,EALW,EAKXA,KAEFC,EAAOD,EAAKE,KAAM,SAAAC,GAAQ,IAAD,EAG3B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAbvB,kBAiBZM,GAjBY,4CAAH,sDCDPO,EAAe,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAGtC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,kCAAMA,EAAN,WCHCO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAAEA,GAAe,IAAD,EACdjB,mBAAS,CAC/BwB,KAAO,GACPa,SAAS,IAH2B,mBACjCC,EADiC,KAC1BC,EAD0B,KAoBxC,OAbAC,qBAAU,WAGNxB,EAASC,GACRwB,MAAM,SAAAC,GACHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAIlB,CAAEpB,IAEEqB,EDhB0BK,CAAc1B,GAAlCa,EAHwB,EAG7BN,KAAaa,EAHgB,EAGhBA,QAErB,OAEA,sBAAKJ,UAAU,iBAAf,UAEQ,oBAAIA,UAAU,mDAAd,SAAmEhB,IAGjEoB,GAAW,mBAAGJ,UAAU,oCAAb,0BACb,qBAAKA,UAAU,YAAf,SAGQH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAMKA,GALCA,EAAIC,aEnBrBgB,EAAgB,WAAO,IAAD,EAEK5C,mBAAS,CAAE,KAFhB,mBAExB6C,EAFwB,KAEZ9C,EAFY,KAS/B,OACI,gCAGI,oBAAIkC,UAAU,YAAd,6BACA,cAAC,EAAD,CAAalC,cAAkBA,IAC/B,uBAEA,6BAEY8C,EAAWnB,KAAK,SAAAT,GAAQ,OAEf,aADL,CACM,EAAD,CAEDA,SAAaA,GADLA,YCdzB6B,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCAdO,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.a35261a1.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\n\n\nexport const AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setInputValue] = useState('');\n    \n    //Asi hago que el inputValue siempre este actualizado con su ultimo valor\n    const handleInputChange = ( e ) => {\n        \n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = ( e ) => {\n            e.preventDefault();\n            console.log('Submit');\n\n            // Validacion para que sea mayor a dos letras lo que escribo en el input\n            // y luego de apretar ENTER hacer que se limpie el input\n            if(inputValue.trim().length > 2){\n\n                //Asi tomo lo que escribo y lo agrego a la lista, el cats son las categorias\n                // las nomro asi porque no me llegan por props y el inputValue es el ultimo valor \n                // que tuvo mi input\n                setCategories(cats => [ inputValue, ...cats ] );\n\n                // Con esta propiedad limpio el input\n                setInputValue('');\n            } else {\n                alert('error');\n            }\n\n    }\n\n    return (\n\n            <form onSubmit={ handleSubmit }>\n\n                <input\n                type=\"text\"\n                value = { inputValue }\n                onChange= { handleInputChange }\n                />\n                \n\n            </form>\n\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired \n}\n","\n\n//Funcion Http : resuelve una promesa que me devuelve la coleccion de mis imagenesx\nexport const getGifs = async( category ) => {\n\n    // El encode remplaza los espacios por lo que corresponda\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI (category) }&limit=12&api_key=4yP59quFLVT42Ny4Ly7X0SlBoBhy89Xa`\n    const resp = await fetch( url );\n    const { data } = await resp.json();\n\n    const gifs = data.map ( img => {\n        // Este return va a transformar cada uno de los elementos que esta dentro del arr img\n        // y me va a retornar un objeto con la informacion que a mi me interesa.\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs;\n\n}","import React from 'react'\n\nexport const GiftGridItem = ( {id, title, url} ) => {\n\n   \n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={ url } alt={ title } />\n            <p> { title } </p>\n        </div>\n    )\n}\n","import React  from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GiftGridItem } from './GiftGridItem';\n\n\nexport const GifGrid = ({ category }) => {\n    // con los dos puntos y el nuevo valor le cambiamos el nombre a data para poder\n    // usarlo y que tenga mas sentido\n    const { data:images, loading } = useFetchGifs( category );\n\n    return (\n\n    <div className=\"grid-container\">\n\n            <h3 className=\"title-category animate__animated animate__fadeIn\">{ category }</h3>\n            {/* // Forma corta de hacer un ternario, esto evalua si esta cargando o no\n            // si esta cargando te dice loading sino , te muestra las imgs */}\n            { loading && <p className=\"animate__animated animate__fadeIn\">'Loading...'</p> }\n            <div className=\"card-grid\">\n\n                {\n                    images.map( img =>(\n                        <GiftGridItem\n                        key={ img.id }\n\n                        //Con esta desetructuracion le mando los argumentos(id, title, url)\n                        //al componente para que los use\n\n                        { ...img }\n                        />\n                    ))\n                }\n        </div>\n    </div>\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\n\nexport const useFetchGifs = ( category ) => {\n    const [state, setstate] = useState({\n        data : [],\n        loading: true\n    });\n\n    // Este codigo se va a ejecutar cuando el componente es renderizado por primera vez\n    useEffect(() => {\n\n        //Ahora es una promesa por eso puedo usar el then para retornar ls imgs\n        getGifs( category )\n        .then( imgs => {\n            setstate({\n                data: imgs,\n                loading: false\n            })\n        });\n\n    }, [ category ])\n\n    return state; // data [ ] y loading en true; ese es mi state\n}","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GiftExpertApp = () => {\n\n    const [categories, setCategories] = useState([ '' ]);\n\n    //Agregar elementos sin mutar el array\n    // const handleAdd = () =>{\n    //     setCategories( [...categories, 'Vegeta'])\n    // }\n\n    return (\n        <div>\n\n\n            <h2 className=\"gif-title\">Gift Expert App</h2>\n            <AddCategory setCategories = { setCategories } />\n            <hr/>\n\n            <ol>\n                    {\n                        categories.map( category =>\n                            // asi retorno un nuevo objeto\n                                (<GifGrid\n                                key = { category }\n                                category = { category } />)\n                        )\n                    }\n\n            </ol>\n        </div>\n    )\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GiftExpertApp } from './GiftExpertApp';\nimport './index.css';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\n    <GiftExpertApp />,\n\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}